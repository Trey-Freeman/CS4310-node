#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test_app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server, Peer Server, and testing with socket.io
 */

var server = http.createServer(app);
var ExpressPeerServer = require('peer').ExpressPeerServer;
var expressPeerServer = ExpressPeerServer(server, {
	debug: true
});
app.use('/peerjs', expressPeerServer);

var io = require('socket.io')(server);
var rooms = {};
var users = {};

/* handle incoming connections from clients */
io.sockets.on('connection', function(socket) {
	//Add User to global users list
	socket.on('addUser', function(data) {
		users[socket.id] = data.user;
	});
	//handle a user trying to join a room
	socket.on('room', function(data) {
		//if room doesn't exist, create one. If wrong password is provided, send back an error
		if (data.room in rooms) {
			if (data.password !== rooms[data.room].password)
				socket.emit('failed login');
			else {
				//join the room
				socket.join(data.room);
				//send back the room, socket id, and send the users
				socket.emit('joined', {
					room: data.room,
					id: socket.id,
					users: rooms[data.room].users
				});
				rooms[data.room].users.push(data.user);			}
		} else { //create the room and add the user (need to handle removing users from a room)
			rooms[data.room] = {
				password: data.password,
				users: [data.user]
			};
			socket.join(data.room);
			socket.emit('joined', {
				room: data.room,
				id: socket.id,
				users: []
			});
		}
	});
	//when message is received, send message to all users in the room
	socket.on('message', function(data) {
		if (data.room in rooms && rooms[data.room].users.indexOf(data.user) !== -1) {
			io.to(data.room).emit('message', data.message);
		} else {
			//Do something
		}
	});
	
});



// catch 404 and forward to error handler
app.use(function(req, res, next) {
	var err = new Error('Not Found');
	err.status = 404;
	next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
	app.use(function(err, req, res, next) {
		res.status(err.status || 500);
		res.render('error', {
			message: err.message,
			error: err
		});
	});
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
	res.status(err.status || 500);
	res.render('error', {
		message: err.message,
		error: {}
	});
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ?
		'Pipe ' + port :
		'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ?
		'pipe ' + addr :
		'port ' + addr.port;
	debug('Listening on ' + bind);
}